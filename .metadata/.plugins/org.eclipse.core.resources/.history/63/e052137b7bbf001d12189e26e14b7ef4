package com.locShop.securityConfig;

import java.util.Arrays;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import com.locShop.service.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
	@Bean
	public UserDetailsService userDetailsService () {
		return new UserDetailsServiceImpl();
	}
	
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public DaoAuthenticationProvider authenticationProvider() {
		DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
		authProvider.setUserDetailsService(userDetailsService());
		authProvider.setPasswordEncoder(passwordEncoder());
		return authProvider;
	}
	
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.authenticationProvider(authenticationProvider());
    }
	
    @Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http
			.csrf().disable()
			.authorizeHttpRequests()
					.requestMatchers("/*").permitAll()
					.requestMatchers("/api/**").authenticated()
					.and()
				.formLogin().loginProcessingUrl("/login-admin")
				 	.defaultSuccessUrl("/api/show-acc")
				 	.failureUrl("/login?error")
				 	.and()
				 .logout()
				 	.logoutUrl("/logout")
				 	.logoutSuccessUrl("/logout")
				 	.deleteCookies("JSESSIONID")
				 	.and()
				 .cors().configurationSource(crosConfigurationSource());
		return http.build();
	}
    
    private CorsConfigurationSource crosConfigurationSource() {
    	  CorsConfiguration configuration = new CorsConfiguration();
    	  configuration.setAllowedOrigins(Arrays.asList("*"));
    	  configuration.setAllowedMethods(Arrays.asList("GET","POST","PUT","DELETE","OPTIONS"));
    	  configuration.setAllowedHeaders(Arrays.asList("*"));
    	  UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    	  source.registerCorsConfiguration("/**", configuration);
    	  return source;
    }

}
